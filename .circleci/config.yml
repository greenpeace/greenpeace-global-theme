---
version: 2.1

workflows:
  main:
    jobs:
      - php72-tests
      - php73-tests
      - acceptance-tests:
          context: org-global
      - a11y-tests:
          context: org-global
      - create-release-zip:
          context: org-global
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\p{Digit}+\.\p{Digit}+.*/

job-references:
  mysql_image: &mysql_image
    circleci/mysql:5.7

  setup_environment: &setup_environment
    name: "Setup Environment Variables"
    command: |
      echo "export PATH=$HOME/.composer/vendor/bin:$PATH" >> $BASH_ENV
      source /home/circleci/.bashrc

  install_dependencies: &install_dependencies
    name: "Install Dependencies"
    command: |
      composer install --dev
      npm i

  php_job: &php_job
    environment:
      - WP_TESTS_DIR: "/tmp/wordpress-tests-lib"
      - WP_CORE_DIR: "/tmp/wordpress/"
    steps:
      - checkout
      - run: *setup_environment
      - run: *install_dependencies
      - run:
          name: "phpcs"
          command: |
            mkdir -p /tmp/test-results/phpcs
            vendor/bin/phpcs --config-set installed_paths vendor/wp-coding-standards/wpcs
            vendor/bin/phpcs --report=junit --report-file=/tmp/test-results/phpcs/$CIRCLE_STAGE.xml
      - run:
          name: "phpunit"
          when: always
          command: |
            mkdir -p /tmp/test-results/phpunit
            rm -rf $WP_TESTS_DIR $WP_CORE_DIR
            bash bin/install-wp-tests.sh wordpress_test root '' 127.0.0.1 latest
            vendor/bin/phpunit --log-junit /tmp/test-results/phpunit/$CIRCLE_STAGE.xml --coverage-html /tmp/coverage-report --coverage-text
      - run:
          name: "stylelint"
          when: always
          command: stylelint "$HOME/project/assets/src/scss/**/*.scss" "$HOME/project/admin/css/*.css"
      - run:
          name: "eslint"
          when: always
          command: eslint "$HOME/project/assets/src/js/**/*.js" "$HOME/project/admin/js/**/*.js"
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/coverage-report

  p4_instance_conf: &p4_instance_conf
    docker:
      - image: greenpeaceinternational/p4-builder:latest
    working_directory: /home/circleci/
    environment:
      APP_HOSTNAME: www.planet4.test
      APP_HOSTPATH:
      CLOUDSQL_INSTANCE: p4-develop-k8s
      CONTAINER_PREFIX: planet4-base
      GOOGLE_PROJECT_ID: planet-4-151612
      HELM_NAMESPACE: develop
      TYPE: "Build"
      WP_DB_NAME: planet4-base_wordpress
      WP_TITLE: Greenpeace Base Development

commands:
  install-instance:
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build - Configure
          command: |
            activate-gcloud-account.sh
            mkdir -p /tmp/workspace/var
            mkdir -p /tmp/workspace/src
            echo "${CIRCLE_BUILD_NUM}" > /tmp/workspace/var/circle-build-num
      - run:
          name: Build - Build containers
          working_directory: /home/circleci
          command: |
            echo "Master theme branch is ${CIRCLE_BRANCH}"
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              BRANCH=contrib
              git --git-dir=/home/circleci/checkout/planet4-master-theme/.git checkout -b contrib
            else
              BRANCH="${CIRCLE_BRANCH}"
            fi
            MASTER_THEME_BRANCH=${BRANCH}#${CIRCLE_SHA1} \
            MERGE_SOURCE=git@github.com:greenpeace/planet4-base-fork.git \
            MERGE_REF=develop \
            make ci
       - run:
          name: Test - Clone planet4-docker-compose
          command: |
            git clone --depth 1 https://github.com/greenpeace/planet4-docker-compose

  run-tests:
    parameters:
      test-name:
        type: string
      test-command:
        type: string
      extract-command:
        type: string
    steps:
      - run:
          name: << parameters.test-name >>
          command: << parameters.test-command >>
      - run:
          name: Test - Extract test artifacts
          when: always
          command: << parameters.extract-command >>
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - var
      - store_test_results:
          path: planet4-docker-compose/artifacts
      - store_artifacts:
          path: planet4-docker-compose/artifacts
      - run:
          name: Build - Notify failure
          when: on_fail
          command: notify-job-failure.sh

jobs:
  php72-tests:
    <<: *php_job
    docker:
      - image: greenpeaceinternational/p4-unit-tests:php7.2-develop
      - image: *mysql_image

  php73-tests:
    <<: *php_job
    docker:
      - image: greenpeaceinternational/p4-unit-tests:php7.3-develop
      - image: *mysql_image

  acceptance-tests:
    <<: *p4_instance_conf
    steps:
      - install-instance
      - run-tests:
          test-name: Test - Run acceptance tests
          test-command: |
            export BUILD_TAG="build-$(cat /tmp/workspace/var/circle-build-num)"
            export APP_IMAGE=gcr.io/planet-4-151612/planet4-base-app:${BUILD_TAG}
            export OPENRESTY_IMAGE=gcr.io/planet-4-151612/planet4-base-openresty:${BUILD_TAG}
            make -C planet4-docker-compose ci test
          extract-command: |
            export BUILD_TAG="build-$(cat /tmp/workspace/var/circle-build-num)"
            export APP_IMAGE=gcr.io/planet-4-151612/planet4-base-app:${BUILD_TAG}
            export OPENRESTY_IMAGE=gcr.io/planet-4-151612/planet4-base-openresty:${BUILD_TAG}
            make -C planet4-docker-compose ci-extract-artifacts

  a11y-tests:
    <<: *p4_instance_conf
    steps:
      - install-instance
      - run-tests:
          test-name: Test - Run accessibility tests
          test-command: |
            export BUILD_TAG="build-$(cat /tmp/workspace/var/circle-build-num)"
            export APP_IMAGE=gcr.io/planet-4-151612/planet4-base-app:${BUILD_TAG}
            export OPENRESTY_IMAGE=gcr.io/planet-4-151612/planet4-base-openresty:${BUILD_TAG}
            make -C planet4-docker-compose ci test-pa11y-ci
          extract-command: |
            export BUILD_TAG="build-$(cat /tmp/workspace/var/circle-build-num)"
            export APP_IMAGE=gcr.io/planet-4-151612/planet4-base-app:${BUILD_TAG}
            export OPENRESTY_IMAGE=gcr.io/planet-4-151612/planet4-base-openresty:${BUILD_TAG}
            make -C planet4-docker-compose ci-extract-a11y-artifacts
            errors=$(jq '.["results"] | .[] | unique_by(.["type"]) | map(select(.["type"] == "error")) | .[]' planet4-docker-compose/artifacts/pa11y/pa11y-ci-results.json)
            if [ ! -z "${errors}" ]; then echo "Errors found, see report in artifacts." && exit 1; else echo "No errors, report available in artifacts."; fi

  create-release-zip:
    docker:
      - image: mhart/alpine-node
    steps:
      - run: apk add curl zip git openssh-client jq python make g++
      - checkout
      - run: git submodule init && git submodule update
      - run: PUPPETEER_SKIP_DOWNLOAD=true PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true npm ci
      - run: npm run build
      - run:
          name: "Remove files we don't want in the zip file."
          command: rm -rf .circleci .git .githooks assets/src bin tests
      - run: mkdir -p /tmp/workspace/
      # Exclude node_modules instead of removing, which takes a long time (lots of small files).
      - run:
          name: "Create zip file"
          command: zip -r /tmp/workspace/planet4-master-theme.zip . -x "node_modules/*"
      - run:
          name: "Zip file size sanity check"
          command: |
            ls -lh /tmp/workspace/planet4-master-theme.zip
            if [ $(wc -c </tmp/workspace/planet4-master-theme.zip) -ge 5000000 ]; then
              echo "Zip file size exceeds 5MB, probably something went wrong."
              exit 1
            fi
      - run:
          name: "Get upload url for this tag"
          command: |
            curl https://api.github.com/repos/greenpeace/planet4-master-theme/releases/tags/${CIRCLE_TAG} |
                jq -r .upload_url |
                sed 's/{.*}/?name=planet4-master-theme.zip/' > /tmp/workspace/upload_url
            cat /tmp/workspace/upload_url
      - run:
          name: "Upload zip file"
          command: |
            curl \
                --fail \
                -H "Authorization: token ${GITHUB_RELEASES_TOKEN}" \
                -H "Content-Type: application/zip" \
                --data-binary @/tmp/workspace/planet4-master-theme.zip \
                "$(cat /tmp/workspace/upload_url)" | jq
